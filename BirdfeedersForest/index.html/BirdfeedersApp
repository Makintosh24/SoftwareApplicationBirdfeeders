

import math

# Variable declaration
# Number of bird feeders in the forest
birdfeeders: int = 0 

# Range of survival rate determined by the feeder segment classification
base_survival_rate_range: tuple = (0.0, 0.0)

# Calculated final survival rate based on diminishing returns formula
calculated_survival_rate: float = 0.0

# Forest attractiveness description
forestattractiveness: str = " The forest is considered more attractive due to the increased  healthier bird population"


# Function to classify bird feeder segments
def classify_bird_feeders(feeders):
    if feeders < 1:
        return 'O', (0.0, 0.0)  # No feeders
    elif 1 <= feeders <= 3:
        return 'A', (0.1, 0.3)
    elif 4 <= feeders <= 6:
        return 'B', (0.3, 0.6)
    elif feeders >= 7:
        return 'C', (0.6, 0.99)
    else:
        return 'Invalid', (0.0, 0.0)

# Function to calculate survival rate with diminishing returns
def calculate_survival_rate_with_diminishing_returns(feeders, initial_rate):
    k = 0.1  # Scaling factor for impact of feeders
    # Logarithmic function to model diminishing returns
    survival_rate = initial_rate + math.log10(1 + k * feeders)
    # Cap the survival rate within a realistic range (0.1 to 0.99)
    return min(max(survival_rate, 0.1), 0.99)

# Function to determine the forest attractiveness based on diminishing returns
def calculate_attractiveness_with_diminishing_returns(feeders: int, survival_rate: float) -> str:
    """
    Determine the attractiveness of the forest based on the number of feeders and survival rate,
    incorporating the concept of diminishing returns.
    """
    # Attractiveness scale adjusted for diminishing returns
    if feeders == 0:
        return "Not very attractive"  # No feeders present
    elif 1 <= feeders <= 3:
        return "Moderately Attractive"  # Few feeders
    elif 4 <= feeders <= 6:
        return "Quite Attractive"  # Moderate number of feeders
    elif 7 <= feeders <= 10:
        return "Highly Attractive"  # High number of feeders
    else:  # Feeders > 10, where attractiveness plateaus
        return "Saturated Attractiveness"


# Example usage
#birdfeeders = int(input("Enter the number of bird feeders in the area: "))

attractiveness = calculate_attractiveness_with_diminishing_returns(feeders, survival_rate)
print(f"The forest with {feeders} feeders and a survival rate of {survival_rate} is: {attractiveness}")

# Classify bird feeders and get the survival rate range
#feeders_segment, survival_rate_range = classify_bird_feeders(birdfeeders)

# Determine the survival rate using diminishing returns
#final_survival_rate = calculate_survival_rate_with_diminishing_returns(birdfeeders, survival_rate_range[0])

# Determine forest attractiveness
#attractiveness = calculate_attractiveness(feeders_segment)

# Output the results
#print("\nAnalysis Result:")
#print(f"Number of Bird Feeders: {birdfeeders}")
#print(f"Feeders Segment: {feeders_segment}")
#print(f"Calculated Bird Survival Rate with Diminishing Returns: {final_survival_rate:.2f}")
#print(f"Forest Attractiveness: {attractiveness}")

# Loop to allow multiple inputs
while True:
    birdfeeders = int(input("Enter the number of bird feeders in the area (or -1 to exit): "))

    # Exit condition
    if birdfeeders == -1:
        print("Exiting the program. Thank you!")
        break

    # Classify bird feeders and get the survival rate range
    feeders_segment, survival_rate_range = classify_bird_feeders(birdfeeders)

    # Calculate survival rate with diminishing returns
    final_survival_rate = calculate_survival_rate_with_diminishing_returns(birdfeeders, survival_rate_range[0])

    # Determine forest attractiveness
    attractiveness = calculate_attractiveness(feeders_segment)

attractiveness = calculate_attractiveness_with_diminishing_returns(feeders, survival_rate)
print(f"The forest with {feeders} feeders and a survival rate of {survival_rate} is: {attractiveness}")

    # Print the results
    print("\nAnalysis Result:")
    print(f"Number of Bird Feeders: {birdfeeders}")
    print(f"Feeders Segment: {feeders_segment}")
    print(f"Calculated Bird Survival Rate with Diminishing Returns: {final_survival_rate:.2f}")
    print(f"Forest Attractiveness: {attractiveness}")
    print("-" * 40)
